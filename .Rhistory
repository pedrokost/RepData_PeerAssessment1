3+3
exit
exit()
quit()
library(RPostgreSQL)
install.packages(RPostgreSQL)
library("manipulate", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
library("rstudio", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
install.packages("manipulate")
install.packages("RPostgreSQL")
library(RPostgreSQL)
library(RPostgreSQL)
install.packages("RPostgreSQL")
library(RPostgreSQL)
con = dbConnect(PostgreSQL(), user="watchdog2", dbname="watchdog2")
con = dbConnect(PostgreSQL(), user="watchdog2")
con = dbConnect(PostgreSQL(), user="pedro", dbname="watchdog2")
con = dbConnect(PostgreSQL(), user="watchdog2", dbname="watchdog2")
con = dbConnect(PostgreSQL(), user="postgres", dbname="watchdog2")
con = dbConnect(PostgreSQL(), user="watchdog2", dbname="watchdog2")
con = dbConnect(PostgreSQL(), dbname="watchdog2")
con = dbConnect(PostgreSQL(), user="watchdog2", dbname="watchdog2", password="watchdog2")
out = dbGetQuery(con, "select * from boats_boat")
View(out)
out
str(out)
dbListConnections(con)
dbGetInfo(con)
summary(con)
fetch(out, n=-1)
dbListResults(con)
dbListTables(con)
dbListFields(con, 'auth_user')
dframe = dbReadTable(con, "auth_user")
View(dframe)
dbDisconnect(con)
library(RPostgreSQL)
# Connect to the database
con = dbConnect(PostgreSQL(), user="watchdog2", dbname="watchdog2", password="watchdog2")
# Get some data out of the db
out = dbGetQuery(con, "select * from boats_boat")
library(RPostgreSQL)
# Connect to the database
con = dbConnect(PostgreSQL(), user="watchdog2", dbname="watchdog2", password="watchdog2")
# Get some data out of the db
out = dbGetQuery(con, "select * from boats_boat")
dframe = dbReadTable(con, "auth_user")
dbGetInfo(con)
dbListTables(con)
dbListFields(con, 'auth_user')
dbDisconnect(con)
# https://code.google.com/p/rpostgresql/
# `install.packages("RPostgreSQL")`
# Load the RPostgreSQL package
library(RPostgreSQL)
# Connect to the database
con = dbConnect(PostgreSQL(), user="watchdog2", dbname="watchdog2", password="watchdog2")
# Get some data out of the db
out = dbGetQuery(con, "select * from boats_boat")
# You can use `dbSendQuery` to send `INSERT`, `DELETE` commands to the database.
# Read an entire table with:
dframe = dbReadTable(con, "auth_user")
# Get Database info:
dbGetInfo(con)
# To list all the tables:
dbListTables(con)
# To list the fields of a table:
dbListFields(con, 'auth_user')
# To disconnect a connection
dbDisconnect(con)
install.packages("rvest")
paste('a', 'b')
paste('a', c('b', 'c'))
library(rvest)
install.packages("rvest")
install.packages("rvest")
library(rvest)
base_url <- "http://catalogue.fiware.org/"
# Count the number of pages
page <- html(paste(base_url, "enablers?chapter_tid=All&page=0"))
page %>%
html_node(".pagination li a") %>%
html_attr("href")
page <- html(paste(base_url, "/enablers?chapter_tid=All&page=0"))
page
page %>%
html_nodes(".pagination li a") %>%
html_attr("href")
page %>%
html_nodes(".pagination li a") %>%
html_text()
page %>%
html_nodes(".pagination a") %>%
html_text()
page %>%
html_nodes(".pagination a")
page %>%
html_nodes(".pagination a")
html_text()
page %>%
html_nodes(".pagination a") %>%
html_text()
?reformulate
exit
exit
quit
quit()
?glm
?cv.glm
exit
quit()
?read.csv
data <- read.csv('activity.csv')
setwd("~/Dropbox/Courses/R/reproducible-research/RepData_PeerAssessment1")
data
data <- read.csv('activity.csv')
data
head(data)
data$date <- as.Date(data$date)
str(data)
head(data)
total_steps = sum(data$steps)
total_steps
?sum
total_steps = sum(data$steps, na.rm=TRUE)
total_steps
unique
unique(data$date)
total_days = unique(data$date)
length(unique(data$date))
total_days = length(unique(data$date))
mean_steps_per_day = total_steps / total_days
mean_steps_per_day
?hist
hist(data$steps, breaks=data$date)
hist(data$steps)
?aggregate
steps_per_day = aggregate(x=steps, FUN=sum, by=date, data=data)
steps_per_day = aggregate(x=data$steps, FUN=sum, by=date, data=data)
steps_per_day = aggregate(x=data$steps, FUN=sum, by=data$date)
data$date
steps_per_day = aggregate(x=data$steps, FUN=sum, by=list(data$date))
steps_per_day
steps_per_day = aggregate(x=data$steps, FUN=sum, by=list(date=data$date))
steps_per_day
steps_per_day = aggregate(x=list(steps=data$steps), FUN=sum, by=list(date=data$date))
steps_per_day = aggregate(x=list(steps=data$steps), FUN=sum, by=list(date=data$date))
names(steps_per_day) <- c('date', 'steps')
steps_per_day
hist(data$steps)
hist(steps_per_day$steps)
steps_interval <- aggregate(steps ~ interval, data, mean, na.rm=TRUE)
steps_interval
str(steps_interval)
plot(steps_interval$interval, steps_interval$steps)
plot(steps_interval$interval, steps_interval$steps, type='l')
which.max(steps_interval$steps)
steps_interval$inteval(which.max(steps_interval$steps))
steps_interval$inteval[which.max(steps_interval$steps)]
steps_interval$inteval[[which.max(steps_interval$steps)]]
steps_interval$inteval
steps_interval$intevals
steps_interval$intervals
steps_interval$interval
steps_interval$interval[[104]]
max_idx <- which.max(steps_interval$steps)
interv <-  steps_interval$interval[[max_idx]]
sum(~is.complete(data))
complete.cases(data)
sum(~complete.cases(data))
sum(!complete.cases(data))
count_rm <- sum(!complete.cases(data))
Answer: `r count_rm`
install.packages('impute')
incomplete <- which(!complete.cases(data))
incomplete
incomplete <- which(!complete.cases(data$steps))
incomplete <- which(!complete.cases(data$steps))
incomplete
incomplete_indices <- which(!complete.cases(data))
median_steps_interval <- aggregate(steps ~ interval, data, median, na.rm=TRUE)
hist(median_steps_interval)
hist(median_steps_interval$steps)
median_steps_interval <- aggregate(steps ~ interval, data, median, na.rm=TRUE)
incomplete_indices <- which(!complete.cases(data))
str(median_steps_interval)
data[1]
data[[1]]
data[[0]]
data[[1]]
data[[1, ]]
data[[, 1]]
data[, 1]
data[1, ]
data[1, ]$interval
median_steps_interval
median_steps_interval[interval=285, ]
median_steps_interval[median_steps_interval$interval=285, ]
median_steps_interval[median_steps_interval$interval==285, ]
median_steps_interval[median_steps_interval$interval==104, ]
median_steps_interval <- aggregate(steps ~ interval, data, median, na.rm=TRUE)
incomplete_indices <- which(!complete.cases(data))
for(i in incomplete_indices) {
data[i, ]$steps <-  median_steps_interval[median_steps_interval$interval==data[1, ]$interval, ]$steps
}
heat(data)
head(data)
complete.cases(data)
sum(!complete.cases(data))
steps_per_day = aggregate(x=data$steps, FUN=sum, by=list(date=data$date))
names(steps_per_day) <- c('date', 'steps')
hist(steps_per_day$steps)
mean_steps <- mean(steps_per_day$steps)
median_steps <- median(steps_per_day$steps)
mean_steps
median_steps
